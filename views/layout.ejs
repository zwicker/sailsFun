<!DOCTYPE html>
<html>
  <head>
    <title>New Sails App</title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">


    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/bootplus-responsive.css">
    <link rel="stylesheet" href="/styles/bootplus-responsive.min.css">
    <link rel="stylesheet" href="/styles/bootplus.css">
    <link rel="stylesheet" href="/styles/bootplus.min.css">
    <link rel="stylesheet" href="/styles/custom.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
  </head>

  <body>

    <!--NAVBAR DEF-->

  <div class="navbar navbar-fixed-top">
   <div class="navbar-inner">
     <div class="container">
       <button type="button" class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
         <span class="icon-bar"></span>
         <span class="icon-bar"></span>
         <span class="icon-bar"></span>
       </button>
       <a class="brand" href="#">Emmet's App</a>
       <div class="nav-collapse collapse">
         <ul class="nav">
           <li class="active"><a href="#">Home</a></li>

           <li class="dropdown">
             <a href="#" class="dropdown-toggle" data-toggle="dropdown">Dropdown <b class="caret"></b></a>
             <ul class="dropdown-menu">
               <li><a href="#">Action</a></li>
               <li><a href="#">Another action</a></li>
               <li><a href="#">Something else here</a></li>
               <li class="divider"></li>
               <li class="nav-header">Nav header</li>
               <li><a href="#">Separated link</a></li>
               <li><a href="#">One more separated link</a></li>
             </ul>
           </li>
         </ul>
         <form class="navbar-form pull-right">
           <input class="span2" type="text" placeholder="Email">
           <input class="span2" type="password" placeholder="Password">
           <button type="submit" class="btn btn-primary">Sign in</button>
         </form>
       </div><!--/.nav-collapse -->
     </div>
   </div>
 </div>


<!-- Main hero unit for a primary marketing message or call to action -->



<div class="container">


<!-- Example row of columns -->
<div class="row">
  <%- body %>
</div>

<footer>
  <p>&copy; Mallpup 2015</p>
</footer>

</div>





    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/dependencies/jquery.js"></script>
    <script src="/js/dependencies/tooltip.js"></script>
    <script src="/js/dependencies/bootstrap-affix.js"></script>
    <script src="/js/dependencies/bootstrap-alert.js"></script>
    <script src="/js/dependencies/bootstrap-button.js"></script>
    <script src="/js/dependencies/bootstrap-carousel.js"></script>
    <script src="/js/dependencies/bootstrap-collapse.js"></script>
    <script src="/js/dependencies/bootstrap-dropdown.js"></script>
    <script src="/js/dependencies/bootstrap-modal.js"></script>
    <script src="/js/dependencies/bootstrap-popover.js"></script>
    <script src="/js/dependencies/bootstrap-scrollspy.js"></script>
    <script src="/js/dependencies/bootstrap-tab.js"></script>
    <script src="/js/dependencies/bootstrap-transition.js"></script>
    <script src="/js/dependencies/bootstrap.js"></script>
    <script src="/js/dependencies/bootstrap.min.js"></script>
    <!--SCRIPTS END-->
  </body>
</html>
